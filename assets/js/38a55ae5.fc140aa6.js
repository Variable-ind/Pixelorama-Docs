"use strict";(self.webpackChunkpixelorama_docs=self.webpackChunkpixelorama_docs||[]).push([[558],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,h=u["".concat(l,".").concat(m)]||u[m]||c[m]||o;return n?a.createElement(h,s(s({ref:t},d),{},{components:n})):a.createElement(h,s({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=u;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,s[1]=r;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4532:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));const o={id:"extension_basics",title:"Extension Basics",sidebar_label:"Extension Basics"},s=void 0,r={unversionedId:"extension_system/extension_basics",id:"extension_system/extension_basics",title:"Extension Basics",description:"Making an Extension",source:"@site/docs/extension_system/extension_basics.md",sourceDirName:"extension_system",slug:"/extension_system/extension_basics",permalink:"/Pixelorama-Docs/extension_system/extension_basics",draft:!1,editUrl:"https://github.com/Orama-Interactive/Pixelorama-Docs/edit/master/docs/extension_system/extension_basics.md",tags:[],version:"current",lastUpdatedBy:"Variable",lastUpdatedAt:1700297185,formattedLastUpdatedAt:"Nov 18, 2023",frontMatter:{id:"extension_basics",title:"Extension Basics",sidebar_label:"Extension Basics"},sidebar:"docs",previous:{title:"Project",permalink:"/Pixelorama-Docs/concepts/project"},next:{title:"Ways to contribute",permalink:"/Pixelorama-Docs/development_and_contributing"}},l={},p=[{value:"Making an Extension",id:"making-an-extension",level:2},{value:"Prerequisites",id:"prerequisites",level:3},{value:"Process",id:"process",level:3},{value:"The File Structure of any basic extension.",id:"the-file-structure-of-any-basic-extension",level:5},{value:"extension.json",id:"extensionjson",level:3},{value:"Main.tscn",id:"maintscn",level:3},{value:"Main.gd",id:"maingd",level:3},{value:"Limitations and Workarounds",id:"limitations-and-workarounds",level:2},{value:"Exporting the Extension",id:"exporting-the-extension",level:2},{value:"Extension Export Options.",id:"extension-export-options",level:5},{value:"Installing the Extension",id:"installing-the-extension",level:2},{value:"Adding an Extension.",id:"adding-an-extension",level:5},{value:"Debugging an Extension",id:"debugging-an-extension",level:2},{value:"Debugging of an extension (stack trace shown as a result of non existent function).",id:"debugging-of-an-extension-stack-trace-shown-as-a-result-of-non-existent-function",level:5}],d={toc:p};function c(e){let{components:t,...o}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"making-an-extension"},"Making an Extension"),(0,i.kt)("p",null,'This is a step-by-step guide of how you can make an extension for pixelorama. For this tutorial the extension we\'ll make will be called "Example" '),(0,i.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"First of all, there are a few prerequisites for you to start creating extensions."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Some knowledge of GdScript."),(0,i.kt)("li",{parentName:"ul"},"A ready to use ",(0,i.kt)("a",{parentName:"li",href:"https://godotengine.org/"},"Godot executable")," (See the ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/Orama-Interactive/Pixelorama/blob/master/CHANGELOG.md"},"Pixelorama Channgelog")," to figure out which version to use)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/Orama-Interactive/Pixelorama"},"Source code of Pixelorama")," (This is optional but will speed up you debugging workflow).")),(0,i.kt)("h3",{id:"process"},"Process"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},'First of all make a new Godot project of name "Example" (the project name is irrelevent but for simplicity we\'ll name it the same as our extension).'),(0,i.kt)("li",{parentName:"ol"},"After that make a directory structure as shown in the image below.")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Extension File Structure",src:n(2051).Z,width:"775",height:"165"})),(0,i.kt)("h5",{id:"the-file-structure-of-any-basic-extension"},"The File Structure of any basic extension."),(0,i.kt)("p",null,'In the "Example" folder you can see three files;'),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"extension.json"),(0,i.kt)("li",{parentName:"ul"},"Main.tscn"),(0,i.kt)("li",{parentName:"ul"},"Main.gd")),(0,i.kt)("p",null,"These files are the bare minimum required for an extension to function properly. Let's go through each of them one by one:"),(0,i.kt)("h3",{id:"extensionjson"},"extension.json"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"extension.json")," file serves as a basic configuration file for the extension. A proper ",(0,i.kt)("inlineCode",{parentName:"p"},"extension.json")," file should contain the below content"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'{\n    "name": "Example",\n    "display_name": "Anything you want",\n    "description": "What the extension does",\n    "author": "Your Name",\n    "version": "0.1",\n    "supported_api_versions": [3],\n    "license": "MIT",\n    "nodes": [\n        "Main.tscn"\n    ]\n}\n')),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Key"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"name"),(0,i.kt)("td",{parentName:"tr",align:null},"The extension name (in this case Example)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"display_name"),(0,i.kt)("td",{parentName:"tr",align:null},"The name actually shown by pixelorama in it's extension list (it can be anything)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"author"),(0,i.kt)("td",{parentName:"tr",align:null},"Author of the extension")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"version"),(0,i.kt)("td",{parentName:"tr",align:null},"version of the extension, it is a floating value so versions like 1.0.3 etc. are invalid")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"supported_api_versions"),(0,i.kt)("td",{parentName:"tr",align:null},"(Optional) Announces the Api level of the extension")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"license"),(0,i.kt)("td",{parentName:"tr",align:null},"Name of license used by the extension")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"nodes"),(0,i.kt)("td",{parentName:"tr",align:null},"Array containing name of scenes that should be instanced as soon extension gets enabled (in this case it is ",(0,i.kt)("inlineCode",{parentName:"td"},"Main.tscn"),")")))),(0,i.kt)("admonition",{title:"Api Versions",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("inlineCode",{parentName:"p"},"supported_api_versions")," is an optional key that is used by pixelorama to determine if it is compatible with it's Api ( E.g ",(0,i.kt)("inlineCode",{parentName:"p"},"[ 3 ]")," means you are making extension for Pixelorama 0.11.x). If your extension is compatible with multiple api e.g (level 2 and 3) then use ",(0,i.kt)("inlineCode",{parentName:"p"},"[ 2, 3 ]"),". To find the Api level of pixelorama open the ",(0,i.kt)("inlineCode",{parentName:"p"},"project.godot")," file in ",(0,i.kt)("strong",{parentName:"p"},"Pixelorama's Source")," and look for ",(0,i.kt)("inlineCode",{parentName:"p"},"config/ExtensionsAPI_Version"))),(0,i.kt)("h3",{id:"maintscn"},"Main.tscn"),(0,i.kt)("p",null,"As mentioned above, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Main.tscn")," will be instanced in pixelorama as soon as the extension gets enabled. a GdScript file (In this case ",(0,i.kt)("inlineCode",{parentName:"p"},"Main.gd"),") is attached to this scene."),(0,i.kt)("h3",{id:"maingd"},"Main.gd"),(0,i.kt)("p",null,"As mentioned above, the ",(0,i.kt)("inlineCode",{parentName:"p"},"Main.gd")," is a script written in GdScript, that will be run as soon as the extension gets enabled. It can be used to"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Instance further scenes (.tscn files)."),(0,i.kt)("li",{parentName:"ul"},"Or contain the core extension code.")),(0,i.kt)("p",null,"The content of a basic ",(0,i.kt)("inlineCode",{parentName:"p"},"Main.gd")," file is;"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'extends Node\n\n# NOTE: use get_node_or_null("/root/ExtensionsApi") to access the extension api.\n\n# Runs as soon as extension is enabled. This script can act as a setup for the extension.\nfunc _enter_tree() -> void:\n    pass\n\n\nfunc _exit_tree() -> void:  # Extension is being uninstalled or disabled\n    # remember to remove things that you added using this extension\n    pass\n')),(0,i.kt)("h2",{id:"limitations-and-workarounds"},"Limitations and Workarounds"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"New custom classes (e.g ",(0,i.kt)("inlineCode",{parentName:"li"},"class_name Foo"),") can't be created in the extension, but there is a workarround. Don't assign scripts custom class names and instead of doing ",(0,i.kt)("inlineCode",{parentName:"li"},"Foo.new()")," if say your script ",(0,i.kt)("em",{parentName:"li"},'"Foo.gd"')," is located at ",(0,i.kt)("inlineCode",{parentName:"li"},"res://src/Extensions/Example/CustomClasses/Foo.gd")," then you can use")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"preload(res://src/Extensions/Example/CustomClasses/Foo.gd).new()\n")),(0,i.kt)("ol",{start:2},(0,i.kt)("li",{parentName:"ol"},"If your extension needs to use pixelorama's classes (e.g ",(0,i.kt)("inlineCode",{parentName:"li"},"Project"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"BaseCel"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"BaseTool")," etc) make empty class scripts and place them in ",(0,i.kt)("inlineCode",{parentName:"li"},"res://src/Extensions/Example/EmptyClasses/"),". For example an empty class scripts of ",(0,i.kt)("inlineCode",{parentName:"li"},"Project")," class will look like;")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"# This is example of an empty Project class\nclass_name Project\nextends Reference\n\n# Empty Variables (variable containing only name and type but no value)\n# obviously they are not all of Project class variables\n# They are written to remove (Variable not found in class: Project) errors\n# (add more variables from the real Project class if your extension needs them)\nvar name: String\nvar size: Vector2\nvar undo_redo: UndoRedo\nvar tiles: Tiles\nvar undos: int\nvar can_undo: bool\nvar fill_color: Color\nvar has_changed: bool\n\n\n# Empty functions (they don't contain any actual code)\n# obviously they are not all of Project class functions,\n# They are written to remove (Method not found in class: Project) errors\n# (add more functions below from the real Project class if your extension needs them)\nfunc _init(_frames := [], _name := tr(\"untitled\"), _size := Vector2(64, 64)) -> void:\n    return  # As the funcion returns void, we are using return without a value\n\n\nfunc remove() -> void:\n    return  # As the funcion returns void, we are using return without a value\n\n\nfunc serialize() -> Dictionary:\n    # As the funcion returns a value, we are returning the most basic value of the same type.\n    # for a Dictionary, it's smallest vaue is just an empty dictionary\n    return {}\n\n")),(0,i.kt)("h2",{id:"exporting-the-extension"},"Exporting the Extension"),(0,i.kt)("p",null,"Now that you have the basic extension code ready, let's export it;"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"From the top bar in Godot editor go to ",(0,i.kt)("strong",{parentName:"p"},"Project>Export")," and choose any platform option (the extension should work on other platforms regardless of which platform you choose).")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"In then go to the ",(0,i.kt)("strong",{parentName:"p"},"Resources")," tab and do the following changes;"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Export Mode")," should be set to ",(0,i.kt)("inlineCode",{parentName:"li"},"Export all resources in the project")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Filters to export non-resource files/folders")," should be set to ",(0,i.kt)("inlineCode",{parentName:"li"},"*.json")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Filters to exclude files/folders from project")," should be set to ",(0,i.kt)("inlineCode",{parentName:"li"},"res://src/Extensions/Example/EmptyClasses/*"),(0,i.kt)("img",{alt:"Extension Export Options",src:n(3967).Z,width:"552",height:"385"}))))),(0,i.kt)("h5",{id:"extension-export-options"},"Extension Export Options."),(0,i.kt)("ol",{start:3},(0,i.kt)("li",{parentName:"ol"},"After that, press ",(0,i.kt)("kbd",null,"Export PCK/Zip")," and export it as a PCK file (both Zip and PCK extensions are recognized by pixelorama but PCK is recommended). The name of exported pck should be the same as the ",(0,i.kt)("inlineCode",{parentName:"li"},"name")," of your extension, in this case it should be ",(0,i.kt)("inlineCode",{parentName:"li"},"Example.pck"))),(0,i.kt)("h2",{id:"installing-the-extension"},"Installing the Extension"),(0,i.kt)("p",null,"To install an extension, from pixelorama's top menu go to ",(0,i.kt)("strong",{parentName:"p"},"Edit>Preferences>Extensions")," and click ",(0,i.kt)("kbd",null,"Add Extension"),"."),(0,i.kt)("admonition",{title:"Drag and Drop",type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"A more easier way would be to drag and drop the extension in Pixelorama.")),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Extension Export Options",src:n(5853).Z,width:"604",height:"427"})),(0,i.kt)("h5",{id:"adding-an-extension"},"Adding an Extension."),(0,i.kt)("p",null,"After it has appeared in the list of extensions, select it press ",(0,i.kt)("kbd",null,"Enable"),"."),(0,i.kt)("h2",{id:"debugging-an-extension"},"Debugging an Extension"),(0,i.kt)("p",null,"In order to debug an extension, you need to have the source-code of your target version of Pixelorama open in another godot instance. To start debugging, ",(0,i.kt)("strong",{parentName:"p"},"run pixelorama from godot")," and follow the steps in ",(0,i.kt)("a",{parentName:"p",href:"#installing-the-extension"},"Installing the Extension"),". The debugger of Godot instance housing pixelorama's source-code will be used to debug the extension."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Extension Export Options",src:n(2623).Z,width:"1026",height:"566"})),(0,i.kt)("h5",{id:"debugging-of-an-extension-stack-trace-shown-as-a-result-of-non-existent-function"},"Debugging of an extension (stack trace shown as a result of non existent function)."))}c.isMDXComponent=!0},5853:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/add_extension-deb6ce1c9f212175bb7b8eb8c3abe287.png"},2623:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/extension_debugging-c22e3077a3da7942bc6ec85601543e5b.png"},3967:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/extension_export-955370c71a730bdd4d0d9b81e6ac5f18.png"},2051:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/extension_structure-5c24b4ccd29fb2aef2f9168b344c3e17.png"}}]);